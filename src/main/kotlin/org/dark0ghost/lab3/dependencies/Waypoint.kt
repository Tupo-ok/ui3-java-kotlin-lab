package org.dark0ghost.lab3.dependencies

/**
 * This class represents a single step in a path generated by the A* pathfinding
 * algorithm.  Waypoints consist of a location, the previous waypoint in the
 * path, and some cost values used to determine the best path.
 */
class Waypoint(
    /** The location of this waypoint.  */
    var location: Location,
    /**
     * The previous waypoint in this path, or `null` if this is
     * the root of the A* search.
     */
    var previous: Waypoint?
) {
    /** Returns the location of the waypoint.  */
    /**
     * Returns the previous waypoint in the path, or `null` if this
     * is the start of the path.
     */
    /**
     * Returns the actual cost of getting to this point from the starting
     * location, through the series of waypoints in this chain.
     */
    /**
     * This field stores the total previous cost of getting from the starting
     * location to this waypoint, through the chain of waypoints.  This is an
     * actual cost of following the path; it does not include any estimates.
     */
    var previousCost = 0f
        private set
    /**
     * Returns an estimate of the remaining cost of traveling from this
     * point to the final destination.
     */
    /**
     * This field stores an estimate of the remaining cost of traveling from
     * this waypoint to the final destination.
     */
    var remainingCost = 0f
        private set

    /**
     * This mutator allows both the previous cost and the remaining cost to be
     * set in one method call.  Normally these values will be set at the same
     * time anyway.
     */
    fun setCosts(prevCost: Float, remainingCost: Float) {
        previousCost = prevCost
        this.remainingCost = remainingCost
    }

    /**
     * Returns the total cost estimate for this waypoint.  This includes the
     * actual cost of getting to this point from the starting location, plus
     * the estimate of the remaining cost of traveling from this point to
     * the final destination.
     */
    val totalCost: Float
        get() = previousCost + remainingCost
}
